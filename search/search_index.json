{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PV3 - Solaranlagen und -kraftwerke","text":"<p>Herzlich Willkommen zum Kurs PV3- Solaranlagen und -kraftwerke. Mithilfe dieser Dokumentation lernen Sie die Software zur Simulation von Solaranlagen zu installieren und zu benutzen.</p> <p>Das Testobjekt ist die PV-Anlage SonnJA!, die von Studierenden der HTW Berlin und dem Verein einleuchtend e.V. geplant wurde. Sie wurde zwischen 2010 und 2013 geplant und befindet sich auf etwa 620 m\u00b2 der Dachfl\u00e4che des Geb\u00e4udes G auf dem Campus Wilheminenhof. Der produzierte Strom dieser 16 kWp - Anlage wird in eine Phase des hochschulinternen Netzes der HTW Berlin eingespeist und nach dem EEG verg\u00fctet. Das Besondere an dieser PV-Anlage ist ihre Konzeption als Forschungsanlage: Die Anlage verf\u00fcgt \u00fcber drei verschiedene Modultechnologien, zwei Wechselrichtertypen und ein umfassendes Monitoring-System mit eigener Wetterstation.</p> <p></p>"},{"location":"#vorgehensweise-in-kurze","title":"Vorgehensweise - In K\u00fcrze","text":"<p>Auf der Lernplattform moodle ist die genaue Vorgehensweise erkl\u00e4rt. Diese Dokumentation fokussiert sich auf die Python basierte Pvlib-pv3 Software.</p> <ul> <li>Installation der ben\u00f6tigten Software</li> <li>Registrieren bei Github</li> <li>Clonen der github repositories</li> <li>SQL Code ausf\u00fchren</li> <li>Modellierung mit Polysun</li> <li>Modellierung mit PVSol</li> <li>Modellierung mit PvLib</li> <li>Vergleichen der Simulationsergebnisse und Erstellen eines Abschlussberichtes</li> </ul>"},{"location":"git/","title":"Git","text":"<p>Nachdem Git erfolgreich installiert wurde und ein Account bei GitHub erstellt wurde, kann das..</p>"},{"location":"installationen/","title":"Installationen","text":"<p>Auf  der Lernplattform moodle existieren ausf\u00fchrliche Installationsanleitungen f\u00fcr die entsprechende Software. Diese sind im Folgenden verlinkt.</p>"},{"location":"installationen/#pycharm","title":"PyCharm","text":"<p>Pycharm ist eine Software zum Entwicklen von Python Projekten. Es existiert eine kostenlose, quelloffene Community-Version sowie eine Professional-Version.</p> <p>Die Installationsanleitung von moodle ist hier zu finden.</p>"},{"location":"installationen/#git","title":"Git","text":"<p>Git ist ein Open-Source-Tool, welches zur Versionskontrolle von Software dient.</p> <p>Die Installationsanleitung von moodle ist hier zu finden. Au\u00dferdem ist es erforderlich sich bei GitHub zu registrieren, um zugriff auf die in der Community geteilten Inhalte zu haben.</p>"},{"location":"installationen/#postgresql","title":"PostgreSQL","text":"<p>Structured Query Language (SQL) ist eine Programmiersprache zum Speichern und Verarbeiten von Informationen in einer relationalen Datenbank. PostgreSQL ist ein open-source objektrelationales Datenbankmanagementsystem und pgAdmin ist die entsprechende Software zur Entwicklung und Administration von PostgreSQL-Datenbanken.</p> <p>Die Installationsanleitung von moodle ist hier zu finden.</p>"},{"location":"installationen/#pvsol","title":"PvSol","text":"<p>PvSol ist ein dynamisches Simulationsprogramm von Valentin-Software zur Auslegung und Optimierung von Photovoltaik-Systemen, welches sich in der Branche etabliert hat. Es ist m\u00f6glich eine 30 t\u00e4gige kostenlose Lizenz zu nutzen.</p> <p>Hier ist eine Verlinkung zur Download-Seite der Software.</p>"},{"location":"installationen/#polysun","title":"PolySun","text":"<p>PolySun ist ebenfalls ein Simultaionsprogramm unteranderem zur Auslegung von PV-Systemen. Es ist m\u00f6glich eine kostenlose Testliznez zu erhalten.</p> <p>Auf dieser Seite ist der Downlaod der Software zu finden.</p>"},{"location":"installationen/#jupyter","title":"Jupyter","text":"<p>Jupyter Notebook ist eine open-soure Software, mit der Code geschrieben und ausgef\u00fchrt, Daten visualisiert und mit anderen Nutzern geteilt werden kann.</p> <p>Die Installationsanleitung von moodle ist hier zu finden.</p>"},{"location":"pvlib-config/","title":"Konfiguration","text":"<p>Das Projekt kann mit der Software PyCharm editiert und ausgef\u00fchrt werden. Damit die Berechnung erfolgreich durchgef\u00fchrt werden kann, m\u00fcssen in der Datei \"config.py\" einige globale Informationen bereitgestellt werden.</p> <p>Hier wird die Location der HTW-PV-Anlage (<code>HTW_LAT</code>, <code>HTW_LON</code>) sowie die Dateipfade der zu verwendenden Wetterdaten definiert (<code>PATH_HTW_WEATHER</code>, <code>PATH_FREDWEATHER</code>). Wenn die bereitgestellten CSV-Dateien verwendet werden sollen, besteht kein Handlungsbedarf. Ein Zielpfad muss angegeben werden, wenn die Ausgabedateien der Simulation an einem anderen Ort als im Softwareverzeichnis bzw. Pfad, in dem das \"main.py\" Skript ausgef\u00fchrt wird, gespeichert werden sollen(<code>PATH_RESULTS</code>).</p> <p></p>"},{"location":"pvlib-execute/","title":"Simulation","text":"<p>Um die Simulation zu starten, wird das Hauptskript \"main.py\" ausgef\u00fchrt, welches alle Informationen und Funktionen aus den anderen Skripten zusammenf\u00fchrt.</p> <p>Hier werden die notwendigen Parameter definiert, die das PV-Modell charakterisieren. Daf\u00fcr sind zwei elementare Funktionen der pvlib-python wichtig.</p>"},{"location":"pvlib-execute/#pvsystem","title":"PVSystem","text":"<p>Mit dem PVSystem-object werden die Parameter der PV-Anlage festgelegt. Dazu z\u00e4hlen u.A. die Modul- und Wechselrichtereigenschaften, die Anzahl der Module, die Ausrichtung, das Temperaturmodell usw. Es k\u00f6nnen hierbei auch mehrere Strings als arrays definiert werden, die an einem Wechselrichter angeschlossen werden.</p>"},{"location":"pvlib-execute/#modelchain","title":"ModelChain","text":"<p>Das ModelChain-object enth\u00e4lt das PVsystem. Hierbei wird die Location bestimmt, welche mithilfe des bereitgestellten Breiten- und L\u00e4ngengrads aus der \"config.py\"  Datei definiert wird. Au\u00dferdem k\u00f6nnen hier noch Verlustmodelle des PVsystems definiert werden.</p> <p>Um die Simulation durchzuf\u00fchren, werden die Wetterdaten ben\u00f6tigt und als Parameter in der \"run_model\" Funktion \u00fcbergeben.</p>"},{"location":"pvlib-execute/#ausgabe-der-simulation","title":"Ausgabe der Simulation","text":"<p>Eine Grafik und eine Tabelle der monatlichen AC-Ertr\u00e4ge (in kWh) der einzelnen Wechselrichter werden als \".png\" und \".csv\" Datei im angegebenen Ordnerpfad abgelegt. Wenn in der \"config.py\" kein Ordnerpfad angegeben ist, werden die Dateien dort gespeichert, von wo aus das \"main.py\" Skript ausgef\u00fchrt wird (siehe Konfiguration).</p> <p></p>"},{"location":"pvlib-installation/","title":"Installation","text":"<p>F\u00fcr die Installation der Pvlib-pv3 wird git ben\u00f6tigt. Sollte git noch nicht installiert sein, muss dies zuerst getan werden. Git installieren.</p>"},{"location":"pvlib-installation/#git-repository-clonen","title":"Git Repository clonen","text":"<p>Im ersten Schritt wird das git repository  lokal geclont. Daf\u00fcr wird zun\u00e4chst zu dem Ordner navigiert, wo das Projekt geclont werden soll. Anschlie\u00dfend wird das git Terminal ge\u00f6ffnet (Rechtsklick -&gt; git bash here) und der folgenden Befehl eingegeben.</p> <ul> <li><code>git clone https://github.com/htw-pv3/pvlib-pv3.git</code></li> </ul> <p>Nun wird das Projekt lokal erstellt.</p>"},{"location":"pvlib-installation/#installieren-der-benotigten-module","title":"Installieren der ben\u00f6tigten Module","text":"<p>Innerhalb des Codes werden verschiedene Bibliotheken verwendet. Damit dies funktionieren kann, m\u00fcssen die ben\u00f6tigten Module installiert werden.</p>"},{"location":"pvlib-installation/#virtuelle-umgebung-erstellen","title":"Virtuelle Umgebung erstellen","text":"<p>In Python werdem f\u00fcr jedes Projekt sogennante virtual environments (kurz \"venv\") verwendet. Es gibt mehrere M\u00f6glichkeiten diese zu erstellen. Eine M\u00f6glichkeit ist die Verwendung von der in pip integrierten venv Funtkion.</p> <p>Zuerst wird das Terminal ge\u00f6ffnet und zu dem Projekt navigert. Dies kann mit dem Befehl <code>cd &lt;Pfad&gt;</code> erledigt werden. Mit dem folgenden Befehl wird dann eine virtuelle Umgebung mit dem Namen \"env\" erstellt. Dadurch wird in dem aktuellen Verzeichnis die Ordnerstruktur der venv erstellt.</p> <ul> <li><code>python3 -m venv env</code></li> </ul> <p>Selbstverst\u00e4ndlich kann auch ein anderer Name f\u00fcr die Umgebung gew\u00e4hlt werden. Dies ist in den nachfolgenden Schritten dann entsprechend zu ber\u00fccksichtigen.</p>"},{"location":"pvlib-installation/#installieren-der-module-in-der-erstellten-umgebung","title":"Installieren der Module in der erstellten Umgebung","text":"<p>Nun muss zun\u00e4chst im Terminal die neu erstellte Umgebung aktiviert werden. Dabei ist darauf zu achten, dass der richtige Name der Umgebung genommen wird. Wenn der vorherige Befehl genau so verwendet wurde, lautet der Name der Umgebung \"env\" und die folgenden Befehle k\u00f6nnen verwendet werden.</p> <ul> <li>Linux and Mac: <code>source env/bin/activate</code></li> <li>Windows: <code>env/Scripts/activate.bat</code></li> </ul> <p>Wenn die Aktivierung erfolgreich war, erscheint im Terminal in der Befehlszeile der Name der Umgebung in Klammern. Im letzten Schritt werden dann die Module installiert:</p> <ul> <li><code>pip install -r requirements.txt</code></li> </ul> <p>Der Installationsvorgang ist abgeschlossen, sobald im Terminal wieder die Befehlszeile erscheint. Durch den Befehl <code>deactivate</code> kann die venv wieder deaktiviert werden.</p>"},{"location":"pvlib-installation/#struktur","title":"Struktur","text":"<p>Nach der Installation sollte die Software zus\u00e4tzlich zur folgenden Struktur einen Ordner f\u00fcr die venv aufweisen.</p> <p>/pvlib-pv3/  |-- setup.py  |-- config.py  |-- htw_inverter.py  |-- htw_modules.py  |-- htw_weather.py   |-- module_parameter_description.csv  |-- openfred_weatherdata_2015_htw.csv  |-- pv3_weather_2015_filled_mview.csv  |-- requirements.txt  |-- README.md  |-- weather_analysis.py  |-- main.py</p>"},{"location":"pvlib-modules/","title":"Modulauswahl","text":"<p>In der Datei \"htw_modules.py\" k\u00f6nnen Photovoltaikmodule aus der \"CEC\" Datenbank gew\u00e4hlt oder eigene Module anhand des Herstellerdatenblatts parametrisiert werden. Um Module selbst zu parametrisieren, m\u00fcssen folgende Variablen definiert werden.</p> <ul> <li><code>celltype</code> Zelltyp als String z.B.: \"monoSi\", \"multiSi\", \"polySi\", \"cis\", \"cigs\", \"cdte\", \"amorphous\"</li> <li><code>width</code> Modulbreite in m</li> <li><code>length</code> Modull\u00e4nge in m</li> <li><code>ptc</code> PTC Leistung (Falls unbekannt: None)</li> <li><code>stc</code> STC Leistung</li> <li><code>bifacial</code> Bifazialit\u00e4t (0: nicht bifazial, 1: bifazial)</li> <li><code>technology</code> Technologie z.B.: \"mono-si\"</li> <li><code>t_noct</code> NOCT Temperatur in \u00b0C</li> <li><code>v_mp</code> Spannung im MPP in V</li> <li><code>i_mp</code> Stromst\u00e4rke im MPP in A</li> <li><code>v_oc</code> Leerlaufspannung in V</li> <li><code>i_sc</code> Kurzschlussstrom in A</li> <li><code>alpha_sc</code> Temperaturkoeffizient bei Kurzschluss in A/\u00b0C (= A/K)</li> <li><code>beta_voc</code> Temperaturkoeffizient bei Leerlaufspannung in V/\u00b0C (= V/K)</li> <li><code>gamma_pmp</code> Temperaturkoeffizient der Leistung im MPP %/\u00b0C (= %/K)</li> <li><code>cells_in_series</code> Anzahl der Zellen (in Serie)</li> <li><code>temp_ref</code> Referenztemperatur (I.d.R 25\u00b0C)</li> </ul> <p>Die CSV Datei \"module_parameter_description.csv\" enth\u00e4lt alle Parameterdefinitionen, welche f\u00fcr ein Modul mit dem \"CEC\" Modell ben\u00f6tigt werden. Mithilfe der Funktion \"fit_cec_sam\" der pvlib-python werden die \u00fcbrigen Parameter, welche sich nicht aus einem typischen Herstellerdatenblatt herauslesen lassen, berechnet.</p>"},{"location":"pvlib-wetterdaten/","title":"Wetterdaten","text":"<p>Bei den Wetterdaten stehen bereits zwei CSV Dateien zur Verf\u00fcgung. Dabei handelt sich um zum einen um Openfred Wetterdaten und zum anderen um die Wetterdaten aus den Messwerten der HTW-Wetterstation.</p> <p>Bei dem Openfred Wetterdatensatz handelt es sich um Daten aus einer offenen Datenbank des Reiner Lemoine Instituts.</p> <p>Die HTW Wetterdaten werden mithilfe des Messdatensatzes der HTW-Wetterstation erstellt. Dieser enth\u00e4lt jedoch Messl\u00fccken, welche mithilfe der PostgreSQL gef\u00fcllt werden. Dabei werden die Messl\u00fccken in der Nacht mit Nullen aufgef\u00fcllt, da die PV-Anlage in diesen Zeiten sowie keine Energie erzeugt. Die Messl\u00fccken am Tag werden durch Mittelwerte aufgef\u00fcllt. Dies ist f\u00fcr kleinere Messl\u00fccken ausreichend genau.</p>"},{"location":"pvlib-wetterdaten/#einlesen-der-wetterdaten","title":"Einlesen der Wetterdaten","text":"<p>F\u00fcr die pvlib-pv3 wird ein Wetterdatensatz in Form eines Pandas DataFrames mit den Spalten \"ghi\" (global horizontal irradiation), \"dhi\" (direct horizontal irradiation) und \"dni\" (direct normal irradiation) erwartet. Der Openfred Datensatz liefert diese Werte bereits, w\u00e4hrend bei den HTW-Wetterdaten nur die globale horizontale Strahlung zur Verf\u00fcgung steht. Die anderen beiden Spalten m\u00fcssen somit noch berechnet werden. Das wird mit der Funktion \"calculate_diffuse_irradiation\" durchgef\u00fchrt, welche Funktionen der pvlib-python (erbs model) benutzt und die entsprechenden Strahlungskomponenten berechnet.</p> <p>In der Datei \"config.py\"  m\u00fcssen die Pfade angegeben werden, in denen sich die CSV Dateien befinden. Wird nur der Dateiname selbst angegeben (z.B. \"pv3_weather_2015_filled_mview.csv\"), wird davon ausgegangen, dass sich die Datei im Softwareverzeichnis befindet (siehe Konfiguration).</p>"},{"location":"pvlib-wetterdaten/#wetterdatenanalyse","title":"Wetterdatenanalyse","text":"<p>Durch Ausf\u00fchren des Skripts \"weather_analysis.py\" k\u00f6nnen die beiden eingelesenen Wetterdaten miteinander verglichen werden. Es kann eine monatliche und j\u00e4hrliche Grafiken dargestellt werden, indem den Variablen <code>plot_monthly</code> und <code>plot_yearly</code> die Werte \"True\" oder \"False\" zugewiesen werden.</p> <p>T\u00e4glich aufsummierte Werte f\u00fcr die globale horizontal Bestrahlung mit aufgef\u00fcllten Messl\u00fccken der HTW Wetterdaten: </p> <p>Gegen\u00fcberstellung der monatlich aufsummierten Werte f\u00fcr die globale horizontal Bestrahlung: </p>"},{"location":"pvlib-%C3%BCberblick/","title":"\u00dcberblick","text":"<p>Das Python Modul pvlib-pv3 ist eine speziell f\u00fcr die PV-Anlage SonnJA!, welche sich auf dem Dach der HTW Berlin befindet, entwickelte Auslegungssoftware, basierend auf der pvlib-pyhon. Der source-code ist auf github bereitgestellt.</p> <p>Quote</p> <p>PvLib python ist eine von der community entwickelte Toolbox, die eine Reihe von Funktionen und Klassen f\u00fcr die Simulation der Leistung von Photovoltaikanlagen und damit verbundene Aufgaben bereitstellt. Die Hauptaufgabe von pvlib python besteht darin, offene, zuverl\u00e4ssige, interoperable und vergleichbare Implementierungen von PV-Systemmodellen bereitzustellen.</p> <p>Das Tool wird mithilfe von git auf das lokale System geclont und kann dann verwendet werden. F\u00fcr eine einfache Handhabung und das Ausf\u00fchren wird die Software PyCharm empfohlen.</p>"},{"location":"sql/","title":"Sql","text":"<p>SQL</p>"},{"location":"wetterdaten/","title":"Wetterdaten","text":"<p>Bei den Wetterdaten stehen bereits zwei CSV Dateien zur Verf\u00fcgung. Dabei handelt sich um zum einen um open_fred Wetterdaten und zum anderen um die Wetterdaten aus den Messwerten der HTW-Wetterstation.</p> <p>Bei dem open_fred Wetterdatensatz handelt es sich um Daten aus einer offenen Datenbank des Reiner Lemoine Instituts.</p> <p>Die HTW Wetterdaten werden mithilfe des Messdatensatzes der HTW-Wetterstation erstellt. Dieser enth\u00e4lt jedoch Messl\u00fccken, welche mithilfe der PostgreSQL gef\u00fcllt werden. Dabei werden die Messl\u00fccken in der Nacht mit Nullen aufgef\u00fcllt, da die PV-Anlage in diesen Zeiten sowie keine Energie erzeugt. Die Messl\u00fccken am Tag werden durch Mittelwerte aufgef\u00fcllt. Dies ist f\u00fcr kleinere Messl\u00fccken ausreichend genau.</p> <p>F\u00fcr die PvLib-pv3 wird ein Wetterdatensatz in Form eines Pandas DataFrames mit den Spalten \"ghi\" (global horizontal irradiation), \"dhi\" (direct horizontal irradiation) und \"dni\" (direct normal irradiation) erwartet. Der open_fred Datensatz liefert diese Werte bereits, w\u00e4hrend bei den HTW-Wetterdaten nur die globale horizontale Strahlung zur Verf\u00fcgung steht. Die anderen beiden Spalten m\u00fcssen somit noch berechnet werden. Das wird mit der Funktion \"calculate_diffuse_irradiation\" durchgef\u00fchrt, welche Funktionen der PvLib-python (erbs model) benutzt und die entsprechenden Strahlungskomponenten berechnet.</p>"}]}